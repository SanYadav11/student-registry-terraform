// Jenkinsfile (Maven + Docker + Login Test)
pipeline {
  agent any

  environment {
    DOCKER_HUB_REPO        = 'santuk/student-registry'   // Docker Hub repo (must exist, lowercase)
    DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'     // Jenkins credential ID
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          // Short git SHA for tagging
          def gitSha
          if (isUnix()) {
            gitSha = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          } else {
            gitSha = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          }
          // Ensure lowercase to satisfy Docker regex
          env.GIT_SHA = gitSha.toLowerCase()
          env.IMAGE_TAG = "0.0." + "${env.BUILD_NUMBER}-" + "SNAPSHOT"       
      }
      }
    }

    stage('Build & Test (Maven)') {
      steps {
        script {
          if (isUnix()) {
            sh 'mvn -B -DskipTests=false clean verify'
          } else {
            bat 'mvn -B -DskipTests=false clean verify'
          }
        }
      }
      post {
        always {
          junit 'target/surefire-reports/*.xml'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          dockerImage = docker.build("index.docker.io/${DOCKER_HUB_REPO}:${env.IMAGE_TAG}")
        }
      }
    }

    stage('Test Docker Hub Login') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
            if (isUnix()) {
              sh 'echo "✅ Successfully logged in to Docker Hub"'
            } else {
              bat 'echo ✅ Successfully logged in to Docker Hub'
            }
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
            dockerImage.push(env.IMAGE_TAG) // push with build tag
          }
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pushed ${DOCKER_HUB_REPO}:${env.IMAGE_TAG} and :latest"
    }
    cleanup {
      script {
        if (isUnix()) {
          sh 'docker image prune -f || true'
        } else {
          bat 'docker image prune -f || true'
        }
      }
    }
  }
}
