# cloudbuild.yaml
steps:
# 1) Build docker image and push to Artifact Registry using kaniko or Docker
# Option A: use docker build (requires Docker-in-Docker or builder that supports docker)
# Option B: use gcr.io/cloud-builders/docker (simplest) or gcr.io/kaniko-project/executor (recommended for security)
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'build'
    - '-t'
    - '$(location)-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'
    - '.'
  id: Build

- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - '$(location)-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'
  id: Push

# 2) Configure gcloud and kubectl
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # configure gcloud
      gcloud container clusters get-credentials ${_GKE_CLUSTER} --zone ${_GKE_ZONE} --project ${PROJECT_ID}
      # substitute image into k8s manifest(s)
      sed -i "s|GCR_IMAGE_PLACEHOLDER|$(location)-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:${SHORT_SHA}|g" k8s/deployment.yaml
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml

options:
  logging: CLOUD_LOGGING_ONLY
 # Optional: set substitutions & timeout
substitutions:
  _ARTIFACT_REPO: "springboot-artifacts"  # override if needed
  _IMAGE_NAME: "springboot-app"
  _GKE_CLUSTER: "demo-gke-cluster"
  _GKE_ZONE: "us-central1-a"

images:
  - '$(location)-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO}/${_IMAGE_NAME}:${SHORT_SHA}'

timeout: '1200s'
